# Generated by Django 2.2.6 on 2019-11-07 21:50

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import persona.models
import persona.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='NID',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('nombres', models.CharField(max_length=200)),
                ('apellido_paterno', models.CharField(max_length=100)),
                ('cedula', models.CharField(max_length=10)),
                ('correo', models.CharField(max_length=254)),
                ('fecha_nacimiento', models.CharField(max_length=15)),
                ('edad', models.IntegerField(null=True)),
                ('estado', models.SmallIntegerField(null=True)),
            ],
            options={
                'db_table': 'nid',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tipo_persona',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo', models.CharField(max_length=100, null=True)),
            ],
            options={
                'verbose_name': 'Tipo de Personal',
                'verbose_name_plural': 'Tipos de Persona',
            },
        ),
        migrations.CreateModel(
            name='Persona',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cedula', models.CharField(max_length=10, null=True, unique=True)),
                ('nombres', models.CharField(max_length=200, null=True)),
                ('apellido_paterno', models.CharField(max_length=100, null=True)),
                ('apellido_materno', models.CharField(max_length=100, null=True)),
                ('sexo', models.SmallIntegerField(choices=[(0, 'Masculino'), (1, 'Femenino')], null=True)),
                ('fecha_nacimiento', models.DateField(null=True)),
                ('convencional', models.CharField(blank=True, max_length=10, null=True)),
                ('celular', models.CharField(max_length=10, null=True)),
                ('correo', models.EmailField(max_length=254)),
                ('direccion', models.CharField(max_length=300)),
                ('estado', models.SmallIntegerField(blank=True, choices=[(0, 'Activo'), (1, 'Inactivo')], default=0)),
                ('edad', models.IntegerField(null=True)),
                ('created', models.DateField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('imagen', models.ImageField(blank=True, null=True, upload_to='persona/pictures')),
                ('tipo', models.ForeignKey(default='1', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tipoP', to='persona.Tipo_persona')),
            ],
            options={
                'verbose_name': 'Tipo de Personal',
                'verbose_name_plural': 'Voluntarios/Capacitadores',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Correo Electronico')),
                ('nombres', models.CharField(max_length=50, null=True)),
                ('apellidos', models.CharField(max_length=50, null=True)),
                ('celular', models.CharField(max_length=15, null=True, validators=[django.core.validators.RegexValidator(message='numero telefonico solo debe ser en el formato : +593999999. o 15 digitos permitidos.', regex='\\+\\d{9,15}$')])),
                ('imagen', models.ImageField(blank=True, null=True, upload_to='users/pictures', validators=[persona.validators.validate_file_extension])),
                ('is_active', models.BooleanField(default=False, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('is_verified', models.BooleanField(default=False, help_text='cuando el usuario verfica el correo,se verifica su cuenta', verbose_name='Verificado')),
                ('is_staff', models.BooleanField(default=False, help_text='Personal de la fundacion', verbose_name='Personal')),
                ('created', models.DateField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'perfil',
                'verbose_name_plural': 'Perfiles',
                'permissions': (('ver_detalle_persona', 'Puede ver detalle Persona'),),
            },
            managers=[
                ('objects', persona.models.UserManager()),
            ],
        ),
    ]
